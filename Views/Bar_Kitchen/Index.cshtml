

@{
    ViewData["Title"] = "Ongoing Bar/Kitchen Orders - Tile View"; 
}
@model ChapeauHerkansing.ViewModels.Bar_Kitchen.OrdersViewModel
@Html.AntiForgeryToken()


<div class="container mt-4 p-3 border border-primary rounded">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <img src="~/images/logo.png" alt="Chapeau" style="height: 50px;">
    
        <h2 class="fw-bold text-center flex-grow-1">@Model.Title</h2>
        <div>
            
            <button class="btn btn-warning">Mara</button>
            <button class="btn btn-outline-primary me-2" onclick="loadOrders()">Refresh</button>
        </div>
      
        <a href="/Bar_Kitchen/@(Model.IsFinished ? "Index" : "FinishedOrders")"
           class="btn btn-outline-success">
            @(Model.IsFinished ? "Back to Ongoing" : "Finished Orders")
        </a>
    </div>

    <div id="orders-container">
        @Html.Partial("_OrdersPartial", Model)
    </div>

</div>
<script>
    let ordersUrl = '@(Model.IsFinished ? "/Bar_Kitchen/GetFinishedOrders" : "/Bar_Kitchen/GetOngoingOrders")';

    document.addEventListener("DOMContentLoaded", function () {
     
        loadOrders();
        updateAllWaitingTimes();

       
        setInterval(loadOrders, 15000);
        
        setInterval(updateAllWaitingTimes, 1000);
    });
    
    function loadOrders() {
        fetch(ordersUrl)
            .then(response => response.text())
            .then(html => {
                document.getElementById("orders-container").innerHTML = html;
                updateAllWaitingTimes(); 
            })
            .catch(error => console.error('Error fetching orders:', error));
    }


    function updateAllWaitingTimes() {
        const waitingTimeElements = document.querySelectorAll(".waiting-time");

        waitingTimeElements.forEach(element => {
            const timeCreated = new Date(element.getAttribute("data-timecreated"));
            const now = new Date();
            const elapsedMilliseconds = now - timeCreated;

            const elapsedSeconds = Math.floor((elapsedMilliseconds / 1000) % 60);
            const elapsedMinutes = Math.floor((elapsedMilliseconds / 1000 / 60) % 60);
            const elapsedHours = Math.floor(elapsedMilliseconds / 1000 / 60 / 60);

            let displayTime = "";

            if (elapsedHours > 0) displayTime += `${elapsedHours} hours `;
            if (elapsedMinutes > 0) displayTime += `${elapsedMinutes} minutes `;
            displayTime += `${elapsedSeconds} seconds`;

            element.querySelector(".time-display").textContent = displayTime;
        });
    }

        window.toggleCategory = function(headerCheckbox) {
      const shouldBeChecked = headerCheckbox.checked;
     
      const card = headerCheckbox.closest('.card');
      const category = headerCheckbox.getAttribute('data-category');

      
      const items = card.querySelectorAll(
        `.status-checkbox[data-category="${category}"]`
      );

      items.forEach(item => {
        if (item.checked !== shouldBeChecked) {
          item.checked = shouldBeChecked;
          
          toggleStatus(item);
        }
      });
    };

    window.toggleStatus = function (checkbox) {
        const orderLineId = checkbox.getAttribute("data-id");
        

        fetch('/Bar_Kitchen/ToggleStatus' , {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
           body: JSON.stringify(parseInt(orderLineId))

        })
            .then(response => {
                if (!response.ok) throw new Error("Failed to update status");
                console.log("Order status updated");
                 loadOrders();
            })
            .catch(error => {
                console.error("Error:", error);
                checkbox.checked = !checkbox.checked; 
            });
    };
</script>
